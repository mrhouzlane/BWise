import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, ContractTransaction, PayableOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export type TablelandPolicyStruct = {
    allowInsert: PromiseOrValue<boolean>;
    allowUpdate: PromiseOrValue<boolean>;
    allowDelete: PromiseOrValue<boolean>;
    whereClause: PromiseOrValue<string>;
    withCheck: PromiseOrValue<string>;
    updatableColumns: PromiseOrValue<string>[];
};
export type TablelandPolicyStructOutput = [
    boolean,
    boolean,
    boolean,
    string,
    string,
    string[]
] & {
    allowInsert: boolean;
    allowUpdate: boolean;
    allowDelete: boolean;
    whereClause: string;
    withCheck: string;
    updatableColumns: string[];
};
export interface ITablelandControllerInterface extends utils.Interface {
    functions: {
        "getPolicy(address)": FunctionFragment;
        "getPolicy(address,uint256)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "getPolicy(address)" | "getPolicy(address,uint256)"): FunctionFragment;
    encodeFunctionData(functionFragment: "getPolicy(address)", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "getPolicy(address,uint256)", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    decodeFunctionResult(functionFragment: "getPolicy(address)", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "getPolicy(address,uint256)", data: BytesLike): Result;
    events: {};
}
export interface ITablelandController extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: ITablelandControllerInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        "getPolicy(address)"(caller: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
        "getPolicy(address,uint256)"(caller: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<ContractTransaction>;
    };
    "getPolicy(address)"(caller: PromiseOrValue<string>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    "getPolicy(address,uint256)"(caller: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
        from?: PromiseOrValue<string>;
    }): Promise<ContractTransaction>;
    callStatic: {
        "getPolicy(address)"(caller: PromiseOrValue<string>, overrides?: CallOverrides): Promise<TablelandPolicyStructOutput>;
        "getPolicy(address,uint256)"(caller: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<TablelandPolicyStructOutput>;
    };
    filters: {};
    estimateGas: {
        "getPolicy(address)"(caller: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
        "getPolicy(address,uint256)"(caller: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<BigNumber>;
    };
    populateTransaction: {
        "getPolicy(address)"(caller: PromiseOrValue<string>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
        "getPolicy(address,uint256)"(caller: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: PayableOverrides & {
            from?: PromiseOrValue<string>;
        }): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=ITablelandController.d.ts.map