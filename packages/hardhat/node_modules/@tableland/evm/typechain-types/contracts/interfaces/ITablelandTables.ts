/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export type TablelandPolicyStruct = {
  allowInsert: PromiseOrValue<boolean>;
  allowUpdate: PromiseOrValue<boolean>;
  allowDelete: PromiseOrValue<boolean>;
  whereClause: PromiseOrValue<string>;
  withCheck: PromiseOrValue<string>;
  updatableColumns: PromiseOrValue<string>[];
};

export type TablelandPolicyStructOutput = [
  boolean,
  boolean,
  boolean,
  string,
  string,
  string[]
] & {
  allowInsert: boolean;
  allowUpdate: boolean;
  allowDelete: boolean;
  whereClause: string;
  withCheck: string;
  updatableColumns: string[];
};

export declare namespace ITablelandTables {
  export type StatementStruct = {
    tableId: PromiseOrValue<BigNumberish>;
    statement: PromiseOrValue<string>;
  };

  export type StatementStructOutput = [BigNumber, string] & {
    tableId: BigNumber;
    statement: string;
  };
}

export interface ITablelandTablesInterface extends utils.Interface {
  functions: {
    "create(address,string[])": FunctionFragment;
    "create(address,string)": FunctionFragment;
    "getController(uint256)": FunctionFragment;
    "lockController(address,uint256)": FunctionFragment;
    "mutate(address,uint256,string)": FunctionFragment;
    "mutate(address,(uint256,string)[])": FunctionFragment;
    "pause()": FunctionFragment;
    "setBaseURI(string)": FunctionFragment;
    "setController(address,uint256,address)": FunctionFragment;
    "unpause()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "create(address,string[])"
      | "create(address,string)"
      | "getController"
      | "lockController"
      | "mutate(address,uint256,string)"
      | "mutate(address,(uint256,string)[])"
      | "pause"
      | "setBaseURI"
      | "setController"
      | "unpause"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "create(address,string[])",
    values: [PromiseOrValue<string>, PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "create(address,string)",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getController",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "lockController",
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "mutate(address,uint256,string)",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "mutate(address,(uint256,string)[])",
    values: [PromiseOrValue<string>, ITablelandTables.StatementStruct[]]
  ): string;
  encodeFunctionData(functionFragment: "pause", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setBaseURI",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setController",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(functionFragment: "unpause", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "create(address,string[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "create(address,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "lockController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mutate(address,uint256,string)",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mutate(address,(uint256,string)[])",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pause", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "setBaseURI", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unpause", data: BytesLike): Result;

  events: {
    "CreateTable(address,uint256,string)": EventFragment;
    "RunSQL(address,bool,uint256,string,tuple)": EventFragment;
    "SetController(uint256,address)": EventFragment;
    "TransferTable(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "CreateTable"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RunSQL"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetController"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferTable"): EventFragment;
}

export interface CreateTableEventObject {
  owner: string;
  tableId: BigNumber;
  statement: string;
}
export type CreateTableEvent = TypedEvent<
  [string, BigNumber, string],
  CreateTableEventObject
>;

export type CreateTableEventFilter = TypedEventFilter<CreateTableEvent>;

export interface RunSQLEventObject {
  caller: string;
  isOwner: boolean;
  tableId: BigNumber;
  statement: string;
  policy: TablelandPolicyStructOutput;
}
export type RunSQLEvent = TypedEvent<
  [string, boolean, BigNumber, string, TablelandPolicyStructOutput],
  RunSQLEventObject
>;

export type RunSQLEventFilter = TypedEventFilter<RunSQLEvent>;

export interface SetControllerEventObject {
  tableId: BigNumber;
  controller: string;
}
export type SetControllerEvent = TypedEvent<
  [BigNumber, string],
  SetControllerEventObject
>;

export type SetControllerEventFilter = TypedEventFilter<SetControllerEvent>;

export interface TransferTableEventObject {
  from: string;
  to: string;
  tableId: BigNumber;
}
export type TransferTableEvent = TypedEvent<
  [string, string, BigNumber],
  TransferTableEventObject
>;

export type TransferTableEventFilter = TypedEventFilter<TransferTableEvent>;

export interface ITablelandTables extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITablelandTablesInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    "create(address,string[])"(
      owner: PromiseOrValue<string>,
      statements: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "create(address,string)"(
      owner: PromiseOrValue<string>,
      statement: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getController(
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    lockController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mutate(address,uint256,string)"(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      statement: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "mutate(address,(uint256,string)[])"(
      caller: PromiseOrValue<string>,
      statements: ITablelandTables.StatementStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  "create(address,string[])"(
    owner: PromiseOrValue<string>,
    statements: PromiseOrValue<string>[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "create(address,string)"(
    owner: PromiseOrValue<string>,
    statement: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getController(
    tableId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  lockController(
    caller: PromiseOrValue<string>,
    tableId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mutate(address,uint256,string)"(
    caller: PromiseOrValue<string>,
    tableId: PromiseOrValue<BigNumberish>,
    statement: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "mutate(address,(uint256,string)[])"(
    caller: PromiseOrValue<string>,
    statements: ITablelandTables.StatementStruct[],
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  pause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setBaseURI(
    baseURI: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setController(
    caller: PromiseOrValue<string>,
    tableId: PromiseOrValue<BigNumberish>,
    controller: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  unpause(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    "create(address,string[])"(
      owner: PromiseOrValue<string>,
      statements: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<BigNumber[]>;

    "create(address,string)"(
      owner: PromiseOrValue<string>,
      statement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getController(
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<string>;

    lockController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mutate(address,uint256,string)"(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      statement: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    "mutate(address,(uint256,string)[])"(
      caller: PromiseOrValue<string>,
      statements: ITablelandTables.StatementStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    pause(overrides?: CallOverrides): Promise<void>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "CreateTable(address,uint256,string)"(
      owner?: null,
      tableId?: null,
      statement?: null
    ): CreateTableEventFilter;
    CreateTable(
      owner?: null,
      tableId?: null,
      statement?: null
    ): CreateTableEventFilter;

    "RunSQL(address,bool,uint256,string,tuple)"(
      caller?: null,
      isOwner?: null,
      tableId?: null,
      statement?: null,
      policy?: null
    ): RunSQLEventFilter;
    RunSQL(
      caller?: null,
      isOwner?: null,
      tableId?: null,
      statement?: null,
      policy?: null
    ): RunSQLEventFilter;

    "SetController(uint256,address)"(
      tableId?: null,
      controller?: null
    ): SetControllerEventFilter;
    SetController(tableId?: null, controller?: null): SetControllerEventFilter;

    "TransferTable(address,address,uint256)"(
      from?: null,
      to?: null,
      tableId?: null
    ): TransferTableEventFilter;
    TransferTable(
      from?: null,
      to?: null,
      tableId?: null
    ): TransferTableEventFilter;
  };

  estimateGas: {
    "create(address,string[])"(
      owner: PromiseOrValue<string>,
      statements: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "create(address,string)"(
      owner: PromiseOrValue<string>,
      statement: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getController(
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    lockController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mutate(address,uint256,string)"(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      statement: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "mutate(address,(uint256,string)[])"(
      caller: PromiseOrValue<string>,
      statements: ITablelandTables.StatementStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    "create(address,string[])"(
      owner: PromiseOrValue<string>,
      statements: PromiseOrValue<string>[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "create(address,string)"(
      owner: PromiseOrValue<string>,
      statement: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getController(
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    lockController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mutate(address,uint256,string)"(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      statement: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "mutate(address,(uint256,string)[])"(
      caller: PromiseOrValue<string>,
      statements: ITablelandTables.StatementStruct[],
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    pause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setBaseURI(
      baseURI: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setController(
      caller: PromiseOrValue<string>,
      tableId: PromiseOrValue<BigNumberish>,
      controller: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    unpause(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
