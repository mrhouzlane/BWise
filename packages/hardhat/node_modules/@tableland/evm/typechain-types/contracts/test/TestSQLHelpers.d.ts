import type { BaseContract, BigNumber, BigNumberish, BytesLike, CallOverrides, PopulatedTransaction, Signer, utils } from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type { TypedEventFilter, TypedEvent, TypedListener, OnEvent, PromiseOrValue } from "../../common";
export interface TestSQLHelpersInterface extends utils.Interface {
    functions: {
        "quote(string)": FunctionFragment;
        "toBatchInsert(string,uint256,string,string[])": FunctionFragment;
        "toCreateFromSchema(string,string)": FunctionFragment;
        "toDelete(string,uint256,string)": FunctionFragment;
        "toInsert(string,uint256,string,string)": FunctionFragment;
        "toNameFromId(string,uint256)": FunctionFragment;
        "toUpdate(string,uint256,string,string)": FunctionFragment;
    };
    getFunction(nameOrSignatureOrTopic: "quote" | "toBatchInsert" | "toCreateFromSchema" | "toDelete" | "toInsert" | "toNameFromId" | "toUpdate"): FunctionFragment;
    encodeFunctionData(functionFragment: "quote", values: [PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "toBatchInsert", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>[]
    ]): string;
    encodeFunctionData(functionFragment: "toCreateFromSchema", values: [PromiseOrValue<string>, PromiseOrValue<string>]): string;
    encodeFunctionData(functionFragment: "toDelete", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "toInsert", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    encodeFunctionData(functionFragment: "toNameFromId", values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]): string;
    encodeFunctionData(functionFragment: "toUpdate", values: [
        PromiseOrValue<string>,
        PromiseOrValue<BigNumberish>,
        PromiseOrValue<string>,
        PromiseOrValue<string>
    ]): string;
    decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toBatchInsert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toCreateFromSchema", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toDelete", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toInsert", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toNameFromId", data: BytesLike): Result;
    decodeFunctionResult(functionFragment: "toUpdate", data: BytesLike): Result;
    events: {};
}
export interface TestSQLHelpers extends BaseContract {
    connect(signerOrProvider: Signer | Provider | string): this;
    attach(addressOrName: string): this;
    deployed(): Promise<this>;
    interface: TestSQLHelpersInterface;
    queryFilter<TEvent extends TypedEvent>(event: TypedEventFilter<TEvent>, fromBlockOrBlockhash?: string | number | undefined, toBlock?: string | number | undefined): Promise<Array<TEvent>>;
    listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
    listeners(eventName?: string): Array<Listener>;
    removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
    removeAllListeners(eventName?: string): this;
    off: OnEvent<this>;
    on: OnEvent<this>;
    once: OnEvent<this>;
    removeListener: OnEvent<this>;
    functions: {
        quote(input: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        toBatchInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<[string]>;
        toCreateFromSchema(schema: PromiseOrValue<string>, prefix: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        toDelete(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        toInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
        toNameFromId(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<[string]>;
        toUpdate(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, setters: PromiseOrValue<string>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<[string]>;
    };
    quote(input: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    toBatchInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<string>;
    toCreateFromSchema(schema: PromiseOrValue<string>, prefix: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    toDelete(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    toInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    toNameFromId(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
    toUpdate(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, setters: PromiseOrValue<string>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    callStatic: {
        quote(input: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        toBatchInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<string>;
        toCreateFromSchema(schema: PromiseOrValue<string>, prefix: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        toDelete(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        toInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
        toNameFromId(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<string>;
        toUpdate(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, setters: PromiseOrValue<string>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<string>;
    };
    filters: {};
    estimateGas: {
        quote(input: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        toBatchInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<BigNumber>;
        toCreateFromSchema(schema: PromiseOrValue<string>, prefix: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        toDelete(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        toInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
        toNameFromId(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<BigNumber>;
        toUpdate(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, setters: PromiseOrValue<string>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<BigNumber>;
    };
    populateTransaction: {
        quote(input: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        toBatchInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>[], overrides?: CallOverrides): Promise<PopulatedTransaction>;
        toCreateFromSchema(schema: PromiseOrValue<string>, prefix: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        toDelete(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        toInsert(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, columns: PromiseOrValue<string>, values: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        toNameFromId(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
        toUpdate(prefix: PromiseOrValue<string>, tableId: PromiseOrValue<BigNumberish>, setters: PromiseOrValue<string>, filters: PromiseOrValue<string>, overrides?: CallOverrides): Promise<PopulatedTransaction>;
    };
}
//# sourceMappingURL=TestSQLHelpers.d.ts.map