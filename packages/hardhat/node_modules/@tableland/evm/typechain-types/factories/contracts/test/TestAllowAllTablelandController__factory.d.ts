import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { TestAllowAllTablelandController, TestAllowAllTablelandControllerInterface } from "../../../contracts/test/TestAllowAllTablelandController";
type TestAllowAllTablelandControllerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TestAllowAllTablelandController__factory extends ContractFactory {
    constructor(...args: TestAllowAllTablelandControllerConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TestAllowAllTablelandController>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TestAllowAllTablelandController;
    connect(signer: Signer): TestAllowAllTablelandController__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610307806100206000396000f3fe6080604052600436106100295760003560e01c80633791dc6a1461002e57806366df322e14610057575b600080fd5b61004161003c36600461016a565b61006a565b60405161004e91906101f0565b60405180910390f35b6100416100653660046102d0565b61009e565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820181905260a08201529080fd5b6040805160c08082018352600080835260208084018290528385018290526060808501819052608080860182905260a080870183905287519586018852600180875286850181905286890152875180850189528581529286019290925286518084018852848152908501528551838152918201909552929391929183019190610137565b60608152602001906001900390816101225790505b5090529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461016557600080fd5b919050565b60006020828403121561017c57600080fd5b61018582610141565b9392505050565b6000815180845260005b818110156101b257602081850181015186830182015201610196565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c0608085015261022f60e085018261018c565b905060808501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808684030160a087015261026b838361018c565b60a0880151878203830160c089015280518083529194508501925084840190600581901b8501860160005b828110156102c257848783030184526102b082875161018c565b95880195938801939150600101610296565b509998505050505050505050565b600080604083850312156102e357600080fd5b6102ec83610141565b94602093909301359350505056fea164736f6c6343000813000a";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "getPolicy";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "allowInsert";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowUpdate";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowDelete";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "whereClause";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "withCheck";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "updatableColumns";
                readonly type: "string[]";
            }];
            readonly internalType: "struct TablelandPolicy";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getPolicy";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "allowInsert";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowUpdate";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowDelete";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "whereClause";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "withCheck";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "updatableColumns";
                readonly type: "string[]";
            }];
            readonly internalType: "struct TablelandPolicy";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): TestAllowAllTablelandControllerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TestAllowAllTablelandController;
}
export {};
//# sourceMappingURL=TestAllowAllTablelandController__factory.d.ts.map