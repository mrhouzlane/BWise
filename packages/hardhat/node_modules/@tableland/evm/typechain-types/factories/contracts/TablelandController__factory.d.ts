import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { TablelandController, TablelandControllerInterface } from "../../contracts/TablelandController";
export declare class TablelandController__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "getPolicy";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "allowInsert";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowUpdate";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowDelete";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "whereClause";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "withCheck";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "updatableColumns";
                readonly type: "string[]";
            }];
            readonly internalType: "struct TablelandPolicy";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getPolicy";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "allowInsert";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowUpdate";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowDelete";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "whereClause";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "withCheck";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "updatableColumns";
                readonly type: "string[]";
            }];
            readonly internalType: "struct TablelandPolicy";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): TablelandControllerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TablelandController;
}
//# sourceMappingURL=TablelandController__factory.d.ts.map