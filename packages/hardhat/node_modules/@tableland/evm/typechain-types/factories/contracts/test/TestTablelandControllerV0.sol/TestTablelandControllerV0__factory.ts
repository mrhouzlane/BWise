/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestTablelandControllerV0,
  TestTablelandControllerV0Interface,
} from "../../../../contracts/test/TestTablelandControllerV0.sol/TestTablelandControllerV0";

const _abi = [
  {
    inputs: [],
    name: "ERC721AQueryablePoliciesUnauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "ERC721EnumerablePoliciesUnauthorized",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "receivedValue",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "requiredValue",
        type: "uint256",
      },
    ],
    name: "InsufficientValue",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [],
    name: "REQUIRED_VALUE",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "caller",
        type: "address",
      },
    ],
    name: "getPolicy",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowInsert",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowUpdate",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowDelete",
            type: "bool",
          },
          {
            internalType: "string",
            name: "whereClause",
            type: "string",
          },
          {
            internalType: "string",
            name: "withCheck",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "updatableColumns",
            type: "string[]",
          },
        ],
        internalType: "struct ITablelandControllerV0Test.Policy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "bars",
        type: "address",
      },
    ],
    name: "setBars",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "foos",
        type: "address",
      },
    ],
    name: "setFoos",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001a3361001f565b61006f565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6113038061007e6000396000f3fe6080604052600436106100705760003560e01c8063898e4aef1161004e578063898e4aef146100d55780638da5cb5b146100ff578063cefd981814610134578063f2fde38b1461015457600080fd5b80633791dc6a14610075578063715018a61461009e57806383f9a5dc146100b5575b600080fd5b610088610083366004610eb0565b610174565b6040516100959190610f5b565b60405180910390f35b3480156100aa57600080fd5b506100b36104d1565b005b3480156100c157600080fd5b506100b36100d0366004610eb0565b6104e5565b3480156100e157600080fd5b506100f1670de0b6b3a764000081565b604051908152602001610095565b34801561010b57600080fd5b5060005460405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610095565b34801561014057600080fd5b506100b361014f366004610eb0565b610534565b34801561016057600080fd5b506100b361016f366004610eb0565b610583565b6040805160c0810182526000808252602082018190529181019190915260608082018190526080820181905260a082015234670de0b6b3a7640000146101fb576040517f7040b58c000000000000000000000000000000000000000000000000000000008152346004820152670de0b6b3a764000060248201526044015b60405180910390fd5b60408051600280825260608201909252600091816020015b60608152602001906001900390816102135750506040805160038082526080820190925291925060009190602082015b606081526020019060019003908161024357505060015460408051808201909152600681527f666f6f5f6964000000000000000000000000000000000000000000000000000060208201529192506102b391869173ffffffffffffffffffffffffffffffffffffffff169061063a565b826000815181106102c6576102c661106a565b602002602001018190525061033384600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166040518060400160405280600681526020017f6261725f69640000000000000000000000000000000000000000000000000000815250610897565b826001815181106103465761034661106a565b6020908102919091010152604080516001808252818301909252600091816020015b60608152602001906001900390816103685790505090506040518060400160405280600381526020017f62617a0000000000000000000000000000000000000000000000000000000000815250816000815181106103c8576103c861106a565b602002602001018190525060405180602001604052806000815250826000815181106103f6576103f661106a565b60200260200101819052506040518060400160405280600781526020017f62617a203e2030000000000000000000000000000000000000000000000000008152508260018151811061044a5761044a61106a565b602002602001018190525060405180602001604052806000815250826002815181106104785761047861106a565b60200260200101819052506040518060c001604052806000151581526020016001151581526020016000151581526020016104b285610b2f565b81526020016104c084610b2f565b815260200191909152949350505050565b6104d9610c19565b6104e36000610c9a565b565b6104ed610c19565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61053c610c19565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61058b610c19565b73ffffffffffffffffffffffffffffffffffffffff811661062e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084016101f2565b61063781610c9a565b50565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526060918491600091908316906370a0823190602401602060405180830381865afa1580156106af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106d39190611099565b90508060000361070f576040517f16c2671e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008460405160200161072291906110b2565b604051602081830303815290604052905060005b8281101561084c576040517f2f745c5900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8981166004830152602482018390526000916107e191871690632f745c5990604401602060405180830381865afa1580156107b8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107dc9190611099565b610d0f565b9050816000036108145782816040516020016107fe9291906110f3565b6040516020818303038152906040529250610839565b8281604051602001610827929190611122565b60405160208183030381529060405292505b50806108448161117a565b915050610736565b508060405160200161085e91906111d9565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0018152919052979650505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84811660048301526060918491600091908316906370a0823190602401602060405180830381865afa15801561090c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109309190611099565b90508060000361096c576040517f3e72a67f00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040517f8462151c00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015260009190841690638462151c90602401600060405180830381865afa1580156109dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a22919081019061121a565b9050600085604051602001610a3791906110b2565b604051602081830303815290604052905060005b8251811015610ae3576000610a78848381518110610a6b57610a6b61106a565b6020026020010151610d0f565b905081600003610aab578281604051602001610a959291906110f3565b6040516020818303038152906040529250610ad0565b8281604051602001610abe929190611122565b60405160208183030381529060405292505b5080610adb8161117a565b915050610a4b565b5080604051602001610af591906111d9565b604080518083037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe001815291905298975050505050505050565b60608060005b8351811015610c1257838181518110610b5057610b5061106a565b60200260200101515160000315610c0057815115610bc257816040518060400160405280600581526020017f20616e6420000000000000000000000000000000000000000000000000000000815250604051602001610bb09291906110f3565b60405160208183030381529060405291505b81848281518110610bd557610bd561106a565b6020026020010151604051602001610bee9291906110f3565b60405160208183030381529060405291505b80610c0a8161117a565b915050610b35565b5092915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146104e3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016101f2565b6000805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60606000610d1c83610dcd565b600101905060008167ffffffffffffffff811115610d3c57610d3c61103b565b6040519080825280601f01601f191660200182016040528015610d66576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610d7057509392505050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310610e16577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310610e42576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310610e6057662386f26fc10000830492506010015b6305f5e1008310610e78576305f5e100830492506008015b6127108310610e8c57612710830492506004015b60648310610e9e576064830492506002015b600a8310610eaa576001015b92915050565b600060208284031215610ec257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610ee657600080fd5b9392505050565b60005b83811015610f08578181015183820152602001610ef0565b50506000910152565b60008151808452610f29816020860160208601610eed565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c06080850152610f9a60e0850182610f11565b905060808501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808684030160a0870152610fd68383610f11565b60a0880151878203830160c089015280518083529194508501925084840190600581901b8501860160005b8281101561102d578487830301845261101b828751610f11565b95880195938801939150600101611001565b509998505050505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000602082840312156110ab57600080fd5b5051919050565b600082516110c4818460208701610eed565b7f20696e2800000000000000000000000000000000000000000000000000000000920191825250600401919050565b60008351611105818460208801610eed565b835190830190611119818360208801610eed565b01949350505050565b60008351611134818460208801610eed565b7f2c00000000000000000000000000000000000000000000000000000000000000908301908152835161116e816001840160208801610eed565b01600101949350505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036111d2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600082516111eb818460208701610eed565b7f2900000000000000000000000000000000000000000000000000000000000000920191825250600101919050565b6000602080838503121561122d57600080fd5b825167ffffffffffffffff8082111561124557600080fd5b818501915085601f83011261125957600080fd5b81518181111561126b5761126b61103b565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156112ae576112ae61103b565b6040529182528482019250838101850191888311156112cc57600080fd5b938501935b828510156112ea578451845293850193928501926112d1565b9897505050505050505056fea164736f6c6343000813000a";

type TestTablelandControllerV0ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestTablelandControllerV0ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestTablelandControllerV0__factory extends ContractFactory {
  constructor(...args: TestTablelandControllerV0ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestTablelandControllerV0> {
    return super.deploy(overrides || {}) as Promise<TestTablelandControllerV0>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestTablelandControllerV0 {
    return super.attach(address) as TestTablelandControllerV0;
  }
  override connect(signer: Signer): TestTablelandControllerV0__factory {
    return super.connect(signer) as TestTablelandControllerV0__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTablelandControllerV0Interface {
    return new utils.Interface(_abi) as TestTablelandControllerV0Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestTablelandControllerV0 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestTablelandControllerV0;
  }
}
