import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type { TestRawTablelandController2, TestRawTablelandController2Interface } from "../../../../contracts/test/TestRawTablelandController.sol/TestRawTablelandController2";
type TestRawTablelandController2ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TestRawTablelandController2__factory extends ContractFactory {
    constructor(...args: TestRawTablelandController2ConstructorParams);
    deploy(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): Promise<TestRawTablelandController2>;
    getDeployTransaction(overrides?: Overrides & {
        from?: PromiseOrValue<string>;
    }): TransactionRequest;
    attach(address: string): TestRawTablelandController2;
    connect(signer: Signer): TestRawTablelandController2__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061025f806100206000396000f3fe6080604052600436106100295760003560e01c80633791dc6a1461002e57806366df322e14610057575b600080fd5b61004161003c3660046100c2565b610065565b60405161004e9190610148565b60405180910390f35b61004161003c366004610228565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820181905260a08201529080fd5b803573ffffffffffffffffffffffffffffffffffffffff811681146100bd57600080fd5b919050565b6000602082840312156100d457600080fd5b6100dd82610099565b9392505050565b6000815180845260005b8181101561010a576020818501810151868301820152016100ee565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c0608085015261018760e08501826100e4565b905060808501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808684030160a08701526101c383836100e4565b60a0880151878203830160c089015280518083529194508501925084840190600581901b8501860160005b8281101561021a57848783030184526102088287516100e4565b958801959388019391506001016101ee565b509998505050505050505050565b6000806040838503121561023b57600080fd5b61024483610099565b94602093909301359350505056fea164736f6c6343000813000a";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "getPolicy";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "allowInsert";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowUpdate";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowDelete";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "whereClause";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "withCheck";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "updatableColumns";
                readonly type: "string[]";
            }];
            readonly internalType: "struct TablelandPolicy";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly name: "getPolicy";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "allowInsert";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowUpdate";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowDelete";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "whereClause";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "withCheck";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "updatableColumns";
                readonly type: "string[]";
            }];
            readonly internalType: "struct TablelandPolicy";
            readonly name: "";
            readonly type: "tuple";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): TestRawTablelandController2Interface;
    static connect(address: string, signerOrProvider: Signer | Provider): TestRawTablelandController2;
}
export {};
//# sourceMappingURL=TestRawTablelandController2__factory.d.ts.map