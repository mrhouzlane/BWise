/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type {
  TestAllowAllTablelandController,
  TestAllowAllTablelandControllerInterface,
} from "../../../contracts/test/TestAllowAllTablelandController";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getPolicy",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowInsert",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowUpdate",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowDelete",
            type: "bool",
          },
          {
            internalType: "string",
            name: "whereClause",
            type: "string",
          },
          {
            internalType: "string",
            name: "withCheck",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "updatableColumns",
            type: "string[]",
          },
        ],
        internalType: "struct TablelandPolicy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getPolicy",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowInsert",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowUpdate",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowDelete",
            type: "bool",
          },
          {
            internalType: "string",
            name: "whereClause",
            type: "string",
          },
          {
            internalType: "string",
            name: "withCheck",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "updatableColumns",
            type: "string[]",
          },
        ],
        internalType: "struct TablelandPolicy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610307806100206000396000f3fe6080604052600436106100295760003560e01c80633791dc6a1461002e57806366df322e14610057575b600080fd5b61004161003c36600461016a565b61006a565b60405161004e91906101f0565b60405180910390f35b6100416100653660046102d0565b61009e565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820181905260a08201529080fd5b6040805160c08082018352600080835260208084018290528385018290526060808501819052608080860182905260a080870183905287519586018852600180875286850181905286890152875180850189528581529286019290925286518084018852848152908501528551838152918201909552929391929183019190610137565b60608152602001906001900390816101225790505b5090529392505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461016557600080fd5b919050565b60006020828403121561017c57600080fd5b61018582610141565b9392505050565b6000815180845260005b818110156101b257602081850181015186830182015201610196565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c0608085015261022f60e085018261018c565b905060808501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808684030160a087015261026b838361018c565b60a0880151878203830160c089015280518083529194508501925084840190600581901b8501860160005b828110156102c257848783030184526102b082875161018c565b95880195938801939150600101610296565b509998505050505050505050565b600080604083850312156102e357600080fd5b6102ec83610141565b94602093909301359350505056fea164736f6c6343000813000a";

type TestAllowAllTablelandControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestAllowAllTablelandControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestAllowAllTablelandController__factory extends ContractFactory {
  constructor(...args: TestAllowAllTablelandControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestAllowAllTablelandController> {
    return super.deploy(
      overrides || {}
    ) as Promise<TestAllowAllTablelandController>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestAllowAllTablelandController {
    return super.attach(address) as TestAllowAllTablelandController;
  }
  override connect(signer: Signer): TestAllowAllTablelandController__factory {
    return super.connect(signer) as TestAllowAllTablelandController__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestAllowAllTablelandControllerInterface {
    return new utils.Interface(
      _abi
    ) as TestAllowAllTablelandControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestAllowAllTablelandController {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestAllowAllTablelandController;
  }
}
