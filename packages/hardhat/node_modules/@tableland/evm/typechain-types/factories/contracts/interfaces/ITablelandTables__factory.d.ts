import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ITablelandTables, ITablelandTablesInterface } from "../../../contracts/interfaces/ITablelandTables";
export declare class ITablelandTables__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "querySize";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "maxQuerySize";
            readonly type: "uint256";
        }];
        readonly name: "MaxQuerySizeExceeded";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "Unauthorized";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "statement";
            readonly type: "string";
        }];
        readonly name: "CreateTable";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bool";
            readonly name: "isOwner";
            readonly type: "bool";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "statement";
            readonly type: "string";
        }, {
            readonly components: readonly [{
                readonly internalType: "bool";
                readonly name: "allowInsert";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowUpdate";
                readonly type: "bool";
            }, {
                readonly internalType: "bool";
                readonly name: "allowDelete";
                readonly type: "bool";
            }, {
                readonly internalType: "string";
                readonly name: "whereClause";
                readonly type: "string";
            }, {
                readonly internalType: "string";
                readonly name: "withCheck";
                readonly type: "string";
            }, {
                readonly internalType: "string[]";
                readonly name: "updatableColumns";
                readonly type: "string[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct TablelandPolicy";
            readonly name: "policy";
            readonly type: "tuple";
        }];
        readonly name: "RunSQL";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "controller";
            readonly type: "address";
        }];
        readonly name: "SetController";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }];
        readonly name: "TransferTable";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "string[]";
            readonly name: "statements";
            readonly type: "string[]";
        }];
        readonly name: "create";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }, {
            readonly internalType: "string";
            readonly name: "statement";
            readonly type: "string";
        }];
        readonly name: "create";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }];
        readonly name: "getController";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }];
        readonly name: "lockController";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "statement";
            readonly type: "string";
        }];
        readonly name: "mutate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "tableId";
                readonly type: "uint256";
            }, {
                readonly internalType: "string";
                readonly name: "statement";
                readonly type: "string";
            }];
            readonly internalType: "struct ITablelandTables.Statement[]";
            readonly name: "statements";
            readonly type: "tuple[]";
        }];
        readonly name: "mutate";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "pause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "baseURI";
            readonly type: "string";
        }];
        readonly name: "setBaseURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "tableId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "controller";
            readonly type: "address";
        }];
        readonly name: "setController";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "unpause";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ITablelandTablesInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ITablelandTables;
}
//# sourceMappingURL=ITablelandTables__factory.d.ts.map