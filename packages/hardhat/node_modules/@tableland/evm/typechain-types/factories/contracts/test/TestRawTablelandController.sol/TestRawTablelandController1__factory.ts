/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../../common";
import type {
  TestRawTablelandController1,
  TestRawTablelandController1Interface,
} from "../../../../contracts/test/TestRawTablelandController.sol/TestRawTablelandController1";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "getPolicy",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowInsert",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowUpdate",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowDelete",
            type: "bool",
          },
          {
            internalType: "string",
            name: "whereClause",
            type: "string",
          },
          {
            internalType: "string",
            name: "withCheck",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "updatableColumns",
            type: "string[]",
          },
        ],
        internalType: "struct TablelandPolicy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "getPolicy",
    outputs: [
      {
        components: [
          {
            internalType: "bool",
            name: "allowInsert",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowUpdate",
            type: "bool",
          },
          {
            internalType: "bool",
            name: "allowDelete",
            type: "bool",
          },
          {
            internalType: "string",
            name: "whereClause",
            type: "string",
          },
          {
            internalType: "string",
            name: "withCheck",
            type: "string",
          },
          {
            internalType: "string[]",
            name: "updatableColumns",
            type: "string[]",
          },
        ],
        internalType: "struct TablelandPolicy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "payable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506102fb806100206000396000f3fe6080604052600436106100295760003560e01c80633791dc6a1461002e57806366df322e14610057575b600080fd5b61004161003c36600461015e565b61006a565b60405161004e91906101e4565b60405180910390f35b6100416100653660046102c4565b61009e565b6040805160c08101825260008082526020820181905291810182905260608082018190526080820181905260a08201529080fd5b6040805160c0810182526000808252602082018190529181019190915260608082018190526080820181905260a08201526040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f6e6f7420696d706c656d656e7465640000000000000000000000000000000000604482015260640160405180910390fd5b803573ffffffffffffffffffffffffffffffffffffffff8116811461015957600080fd5b919050565b60006020828403121561017057600080fd5b61017982610135565b9392505050565b6000815180845260005b818110156101a65760208185018101518683018201520161018a565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6000602080835283511515818401528084015115156040840152604084015115156060840152606084015160c0608085015261022360e0850182610180565b905060808501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0808684030160a087015261025f8383610180565b60a0880151878203830160c089015280518083529194508501925084840190600581901b8501860160005b828110156102b657848783030184526102a4828751610180565b9588019593880193915060010161028a565b509998505050505050505050565b600080604083850312156102d757600080fd5b6102e083610135565b94602093909301359350505056fea164736f6c6343000813000a";

type TestRawTablelandController1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TestRawTablelandController1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class TestRawTablelandController1__factory extends ContractFactory {
  constructor(...args: TestRawTablelandController1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<TestRawTablelandController1> {
    return super.deploy(
      overrides || {}
    ) as Promise<TestRawTablelandController1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): TestRawTablelandController1 {
    return super.attach(address) as TestRawTablelandController1;
  }
  override connect(signer: Signer): TestRawTablelandController1__factory {
    return super.connect(signer) as TestRawTablelandController1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestRawTablelandController1Interface {
    return new utils.Interface(_abi) as TestRawTablelandController1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): TestRawTablelandController1 {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as TestRawTablelandController1;
  }
}
