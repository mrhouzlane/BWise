"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;
Object.defineProperty(exports, "__esModule", { value: true });
const dotenv = __importStar(require("dotenv"));
const config_1 = require("hardhat/config");
require("@openzeppelin/hardhat-upgrades");
require("@nomiclabs/hardhat-ethers");
require("@nomiclabs/hardhat-etherscan");
require("@nomicfoundation/hardhat-chai-matchers");
require("@typechain/hardhat");
require("hardhat-gas-reporter");
require("hardhat-contract-sizer");
require("solidity-coverage");
const network_1 = require("./network");
dotenv.config();
const homestead = {
    url: `https://eth-mainnet.alchemyapi.io/v2/${(_a = process.env.ETHEREUM_API_KEY) !== null && _a !== void 0 ? _a : ""}`,
    accounts: process.env.ETHEREUM_PRIVATE_KEY !== undefined
        ? [process.env.ETHEREUM_PRIVATE_KEY]
        : [],
};
const config = {
    solidity: {
        version: "0.8.19",
        settings: {
            optimizer: {
                enabled: true,
                runs: 9999999,
            },
            metadata: {
                // do not include the metadata hash, since this is machine dependent
                // and we want all generated code to be deterministic
                // https://docs.soliditylang.org/en/v0.7.6/metadata.html
                bytecodeHash: "none",
            },
        },
    },
    contractSizer: {
        alphaSort: true,
        disambiguatePaths: false,
        runOnCompile: false,
        strict: true,
        only: [],
    },
    gasReporter: {
        enabled: process.env.REPORT_GAS !== undefined,
        currency: "USD",
    },
    etherscan: {
        apiKey: {
            // ethereum
            mainnet: process.env.ETHERSCAN_API_KEY || "",
            sepolia: process.env.ETHERSCAN_API_KEY || "",
            // optimism
            optimisticEthereum: process.env.OPTIMISM_ETHERSCAN_API_KEY || "",
            optimisticGoerli: process.env.OPTIMISM_ETHERSCAN_API_KEY || "",
            // arbitrum
            arbitrumOne: process.env.ARBISCAN_API_KEY || "",
            arbitrumNova: process.env.ARBISCAN_NOVA_API_KEY || "",
            arbitrumGoerli: process.env.ARBISCAN_API_KEY || "",
            // polygon
            polygon: process.env.POLYSCAN_API_KEY || "",
            polygonMumbai: process.env.POLYSCAN_API_KEY || "",
        },
        customChains: [
            {
                network: "arbitrumNova",
                chainId: 42170,
                urls: {
                    apiURL: "https://api-nova.arbiscan.io/api",
                    browserURL: "https://nova.arbiscan.io/",
                },
            },
        ],
    },
    networks: {
        // mainnets
        mainnet: homestead,
        homestead,
        optimism: {
            url: `https://opt-mainnet.g.alchemy.com/v2/${(_b = process.env.OPTIMISM_API_KEY) !== null && _b !== void 0 ? _b : ""}`,
            accounts: process.env.OPTIMISM_PRIVATE_KEY !== undefined
                ? [process.env.OPTIMISM_PRIVATE_KEY]
                : [],
        },
        arbitrum: {
            url: `https://arb-mainnet.g.alchemy.com/v2/${(_c = process.env.ARBITRUM_API_KEY) !== null && _c !== void 0 ? _c : ""}`,
            accounts: process.env.ARBITRUM_PRIVATE_KEY !== undefined
                ? [process.env.ARBITRUM_PRIVATE_KEY]
                : [],
        },
        "arbitrum-nova": {
            url: `https://skilled-yolo-mountain.nova-mainnet.discover.quiknode.pro/${(_d = process.env.ARBITRUM_NOVA_API_KEY) !== null && _d !== void 0 ? _d : ""}`,
            accounts: process.env.ARBITRUM_NOVA_PRIVATE_KEY !== undefined
                ? [process.env.ARBITRUM_NOVA_PRIVATE_KEY]
                : [],
        },
        matic: {
            url: `https://polygon-mainnet.g.alchemy.com/v2/${(_e = process.env.POLYGON_API_KEY) !== null && _e !== void 0 ? _e : ""}`,
            accounts: process.env.POLYGON_PRIVATE_KEY !== undefined
                ? [process.env.POLYGON_PRIVATE_KEY]
                : [],
        },
        filecoin: {
            url: `https://rpc.ankr.com/filecoin/${(_f = process.env.FILECOIN_API_KEY) !== null && _f !== void 0 ? _f : ""}`,
            accounts: process.env.FILECOIN_PRIVATE_KEY !== undefined
                ? [process.env.FILECOIN_PRIVATE_KEY]
                : [],
        },
        // testnets
        sepolia: {
            url: `https://eth-sepolia.g.alchemy.com/v2/${(_g = process.env.ETHEREUM_SEPOLIA_API_KEY) !== null && _g !== void 0 ? _g : ""}`,
            accounts: process.env.ETHEREUM_SEPOLIA_PRIVATE_KEY !== undefined
                ? [process.env.ETHEREUM_SEPOLIA_PRIVATE_KEY]
                : [],
        },
        "optimism-goerli": {
            url: `https://opt-goerli.g.alchemy.com/v2/${(_h = process.env.OPTIMISM_GOERLI_API_KEY) !== null && _h !== void 0 ? _h : ""}`,
            accounts: process.env.OPTIMISM_GOERLI_PRIVATE_KEY !== undefined
                ? [process.env.OPTIMISM_GOERLI_PRIVATE_KEY]
                : [],
        },
        "arbitrum-goerli": {
            url: `https://arb-goerli.g.alchemy.com/v2/${(_j = process.env.ARBITRUM_GOERLI_API_KEY) !== null && _j !== void 0 ? _j : ""}`,
            accounts: process.env.ARBITRUM_GOERLI_PRIVATE_KEY !== undefined
                ? [process.env.ARBITRUM_GOERLI_PRIVATE_KEY]
                : [],
        },
        maticmum: {
            url: `https://polygon-mumbai.g.alchemy.com/v2/${(_k = process.env.POLYGON_MUMBAI_API_KEY) !== null && _k !== void 0 ? _k : ""}`,
            accounts: process.env.POLYGON_MUMBAI_PRIVATE_KEY !== undefined
                ? [process.env.POLYGON_MUMBAI_PRIVATE_KEY]
                : [],
        },
        "filecoin-calibration": {
            url: `https://api.calibration.node.glif.io/rpc/v1${(_l = process.env.FILECOIN_CALIBRATION_API_KEY) !== null && _l !== void 0 ? _l : ""}`,
            accounts: process.env.FILECOIN_CALIBRATION_PRIVATE_KEY !== undefined
                ? [process.env.FILECOIN_CALIBRATION_PRIVATE_KEY]
                : [],
        },
        // devnets
        "optimism-goerli-staging": {
            url: `https://opt-goerli.g.alchemy.com/v2/${(_m = process.env.OPTIMISM_GOERLI_STAGING_API_KEY) !== null && _m !== void 0 ? _m : ""}`,
            accounts: process.env.OPTIMISM_GOERLI_STAGING_PRIVATE_KEY !== undefined
                ? [process.env.OPTIMISM_GOERLI_STAGING_PRIVATE_KEY]
                : [],
        },
        hardhat: {
            mining: {
                auto: !(process.env.HARDHAT_DISABLE_AUTO_MINING === "true"),
                interval: [100, 3000],
            },
            allowUnlimitedContractSize: process.env.HARDHAT_UNLIMITED_CONTRACT_SIZE === "true",
        },
    },
    baseURIs: network_1.baseURIs,
    proxies: network_1.proxies,
};
(0, config_1.extendEnvironment)((hre) => {
    // Get base URI for user-selected network
    const uris = hre.userConfig.baseURIs;
    hre.baseURI = uris[hre.network.name];
    // Get proxy address for user-selected network
    const proxies = hre.userConfig.proxies;
    hre.proxy = proxies[hre.network.name];
});
exports.default = config;
//# sourceMappingURL=hardhat.config.js.map