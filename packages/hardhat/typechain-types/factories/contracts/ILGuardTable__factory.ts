/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  ILGuardTable,
  ILGuardTableInterface,
} from "../../contracts/ILGuardTable";

const _abi = [
  {
    inputs: [
      {
        internalType: "uint256",
        name: "chainid",
        type: "uint256",
      },
    ],
    name: "ChainNotSupported",
    type: "error",
  },
  {
    inputs: [],
    name: "create",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "pool",
        type: "string",
      },
      {
        internalType: "string",
        name: "platform",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bool",
        name: "autoRebalance",
        type: "bool",
      },
    ],
    name: "insert",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "onERC721Received",
    outputs: [
      {
        internalType: "bytes4",
        name: "",
        type: "bytes4",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b50610e4f806100206000396000f3fe6080604052600436106100345760003560e01c8063150b7a0214610039578063ba8bc835146100b2578063efc81a8c146100c7575b600080fd5b34801561004557600080fd5b5061007d610054366004610872565b7f150b7a0200000000000000000000000000000000000000000000000000000000949350505050565b6040517fffffffff00000000000000000000000000000000000000000000000000000000909116815260200160405180910390f35b6100c56100c0366004610915565b6100cf565b005b6100c5610267565b60006100da8561034d565b6100e38561034d565b6100ec85610376565b61016a8561012f576040518060400160405280600581526020017f66616c736500000000000000000000000000000000000000000000000000000081525061034d565b6040518060400160405280600481526020017f747275650000000000000000000000000000000000000000000000000000000081525061034d565b60405160200161017d94939291906109be565b6040516020818303038152906040529050610196610434565b73ffffffffffffffffffffffffffffffffffffffff1663377af0da306000546102106040518060400160405280600d81526020017f494c47554152445f5441424c4500000000000000000000000000000000000000815250600054604051806060016040528060228152602001610dbf6022913988610607565b6040518463ffffffff1660e01b815260040161022e93929190610a9c565b600060405180830381600087803b15801561024857600080fd5b505af115801561025c573d6000803e3d6000fd5b505050505050505050565b60006102c0604051806060016040528060398152602001610de1603991396040518060400160405280600d81526020017f494c47554152445f5441424c4500000000000000000000000000000000000000815250610646565b90506102ca610434565b73ffffffffffffffffffffffffffffffffffffffff1663a15ab08d30836040518363ffffffff1660e01b8152600401610304929190610ada565b6020604051808303816000875af1158015610323573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103479190610b11565b60005550565b6060816040516020016103609190610b2a565b6040516020818303038152906040529050919050565b606060006103838361067c565b600101905060008167ffffffffffffffff8111156103a3576103a36107af565b6040519080825280601f01601f1916602001820160405280156103cd576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846103d757509392505050565b600046600103610457575073012969f7e3439a9b04025b5a049eb9bad82a8c1290565b46600a03610478575073fad44bf5b843de943a09d4f3e84949a11d3aa3e690565b4661a4b10361049a5750739abd75e8640871a5a20d3b4ee6330a04c962affd90565b4661a4ba036104bc5750731a22854c5b1642760a827f20137a67930ae108d290565b466089036104dd5750735c4e6a9e5c1e1bf445a062006faf19ea6c49afea90565b4661013a036104ff57507359ef8bf2d6c102b4c42aef9189e1a9f0abfd652d90565b4662aa36a703610522575073c50c62498448acc8dbde43da77f8d5d2e2c7597d90565b466101a403610544575073c72e8a7be04f2469f8c2db3f1bdf69a7d516abba90565b4662066eed03610567575073033f69e8d119205089ab15d340f5b797732f646b90565b46620138810361058a5750734b48841d4b32c4650e4abc117a03fe8b51f38f6890565b466204cb2f036105ad575073030bcf3d50cad04c2e57391b12740982a930862190565b46617a69036105cf575073e7f1725e7734ce288f8367e1bb143e90bb3f051290565b6040517f264e42cf00000000000000000000000000000000000000000000000000000000815246600482015260240160405180910390fd5b60606000610615868661075f565b905080848460405160200161062c93929190610b74565b604051602081830303815290604052915050949350505050565b60608161065246610376565b8460405160200161066593929190610c5e565b604051602081830303815290604052905092915050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106106c5577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef810000000083106106f1576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061070f57662386f26fc10000830492506010015b6305f5e1008310610727576305f5e100830492506008015b612710831061073b57612710830492506004015b6064831061074d576064830492506002015b600a8310610759576001015b92915050565b60608261076b46610376565b61077484610376565b60405160200161066593929190610d48565b803573ffffffffffffffffffffffffffffffffffffffff811681146107aa57600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600067ffffffffffffffff808411156107f9576107f96107af565b604051601f85017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190828211818310171561083f5761083f6107af565b8160405280935085815286868601111561085857600080fd5b858560208301376000602087830101525050509392505050565b6000806000806080858703121561088857600080fd5b61089185610786565b935061089f60208601610786565b925060408501359150606085013567ffffffffffffffff8111156108c257600080fd5b8501601f810187136108d357600080fd5b6108e2878235602084016107de565b91505092959194509250565b600082601f8301126108ff57600080fd5b61090e838335602085016107de565b9392505050565b6000806000806080858703121561092b57600080fd5b843567ffffffffffffffff8082111561094357600080fd5b61094f888389016108ee565b9550602087013591508082111561096557600080fd5b50610972878288016108ee565b935050604085013591506060850135801515811461098f57600080fd5b939692955090935050565b60005b838110156109b557818101518382015260200161099d565b50506000910152565b600085516109d0818460208a0161099a565b80830190507f2c000000000000000000000000000000000000000000000000000000000000008082528651610a0c816001850160208b0161099a565b600192019182018190528551610a29816002850160208a0161099a565b60029201918201528351610a4481600384016020880161099a565b016003019695505050505050565b60008151808452610a6a81602086016020860161099a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b73ffffffffffffffffffffffffffffffffffffffff84168152826020820152606060408201526000610ad16060830184610a52565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000610b096040830184610a52565b949350505050565b600060208284031215610b2357600080fd5b5051919050565b60007f27000000000000000000000000000000000000000000000000000000000000008083528351610b6381600186016020880161099a565b600193019283015250600201919050565b7f494e5345525420494e544f200000000000000000000000000000000000000000815260008451610bac81600c85016020890161099a565b7f2800000000000000000000000000000000000000000000000000000000000000600c918401918201528451610be981600d84016020890161099a565b7f2956414c55455328000000000000000000000000000000000000000000000000600d92909101918201528351610c2781601584016020880161099a565b7f29000000000000000000000000000000000000000000000000000000000000006015929091019182015260160195945050505050565b7f435245415445205441424c452000000000000000000000000000000000000000815260008451610c9681600d85016020890161099a565b7f5f00000000000000000000000000000000000000000000000000000000000000600d918401918201528451610cd381600e84016020890161099a565b7f2800000000000000000000000000000000000000000000000000000000000000600e92909101918201528351610d1181600f84016020880161099a565b7f2900000000000000000000000000000000000000000000000000000000000000600f929091019182015260100195945050505050565b60008451610d5a81846020890161099a565b80830190507f5f000000000000000000000000000000000000000000000000000000000000008082528551610d96816001850160208a0161099a565b60019201918201528351610db181600284016020880161099a565b016002019594505050505056fe504f4f4c2c504c4154464f524d2c56616c75652c4175746f5f726562616c616e6365504f4f4c20746578742c504c4154464f524d20746578742c56616c756520696e74656765722c4175746f5f726562616c616e636520626f6f6ca2646970667358221220cfaa4625b5cd667d934264f8c5290080c947a0f76d346cd19d0ac625fc92776664736f6c63430008130033";

type ILGuardTableConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ILGuardTableConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ILGuardTable__factory extends ContractFactory {
  constructor(...args: ILGuardTableConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ILGuardTable> {
    return super.deploy(overrides || {}) as Promise<ILGuardTable>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): ILGuardTable {
    return super.attach(address) as ILGuardTable;
  }
  override connect(signer: Signer): ILGuardTable__factory {
    return super.connect(signer) as ILGuardTable__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ILGuardTableInterface {
    return new utils.Interface(_abi) as ILGuardTableInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ILGuardTable {
    return new Contract(address, _abi, signerOrProvider) as ILGuardTable;
  }
}
